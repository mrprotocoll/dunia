name: Authentication
description: |-

  Endpoint to manage user authentication
endpoints:
  -
    httpMethods:
      - POST
    uri: api/v1/admin/register
    metadata:
      groupName: Authentication
      groupDescription: |-

        Endpoint to manage user authentication
      subgroup: ''
      subgroupDescription: ''
      title: 'Register a new admin.'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'Must not be greater than 255 characters.'
        required: true
        example: rrcgcvzelgyn
        type: string
        custom: []
      email:
        name: email
        description: 'Must be a valid email address. Must not be greater than 255 characters.'
        required: true
        example: bgutmann@example.net
        type: string
        custom: []
      password:
        name: password
        description: ''
        required: true
        example: quisquam
        type: string
        custom: []
    cleanBodyParameters:
      name: rrcgcvzelgyn
      email: bgutmann@example.net
      password: quisquam
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data":{"id":"99f629e1-0918-4638-8729-0985e263a394","name":"Terrill Dooley","email":"nhermann@example.org"}}'
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
                "error": "Account already exist, kindly login"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/admin/login
    metadata:
      groupName: Authentication
      groupDescription: |-

        Endpoint to manage user authentication
      subgroup: ''
      subgroupDescription: ''
      title: 'Admin Login.'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'Must be a valid email address.'
        required: true
        example: mbraun@example.org
        type: string
        custom: []
      password:
        name: password
        description: ''
        required: true
        example: CI~Id.d;b
        type: string
        custom: []
    cleanBodyParameters:
      email: mbraun@example.org
      password: CI~Id.d;b
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
               "token": "generated_token"
               "data": {
                   "id": 1,
                   "name": "User",
                   "email": "user@email.com"
               }
           }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
               "error": "The provided credentials are incorrect."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/logout
    metadata:
      groupName: Authentication
      groupDescription: |-

        Endpoint to manage user authentication
      subgroup: ''
      subgroupDescription: ''
      title: Logout.
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {ACCESS_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 204
        content: |-
          {
               "message": "Logged out successfully."
           }
        headers: []
        description: ''
        custom: []
      -
        status: 402
        content: |-
          {
               "message": "Unauthorized user"
           }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer Vc84Pebav66f1hZEdak5g3D'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/register
    metadata:
      groupName: Authentication
      groupDescription: |-

        Endpoint to manage user authentication
      subgroup: ''
      subgroupDescription: ''
      title: 'Register a new user.'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'Must not be greater than 255 characters.'
        required: true
        example: xkawhoegwijkiqtfz
        type: string
        custom: []
      email:
        name: email
        description: 'Must be a valid email address. Must not be greater than 255 characters.'
        required: true
        example: myles88@example.net
        type: string
        custom: []
      password:
        name: password
        description: ''
        required: true
        example: ad
        type: string
        custom: []
    cleanBodyParameters:
      name: xkawhoegwijkiqtfz
      email: myles88@example.net
      password: ad
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data":{"id":"99f629e1-16f1-423e-9188-27f4b6a6d5f8","name":"Peter Miller I","email":"ilang@example.net"}}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/login
    metadata:
      groupName: Authentication
      groupDescription: |-

        Endpoint to manage user authentication
      subgroup: ''
      subgroupDescription: ''
      title: 'User Login.'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'Must be a valid email address.'
        required: true
        example: corkery.jaden@example.org
        type: string
        custom: []
      password:
        name: password
        description: ''
        required: true
        example: 'tvP#!m3)PO'
        type: string
        custom: []
    cleanBodyParameters:
      email: corkery.jaden@example.org
      password: 'tvP#!m3)PO'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
               "token": "generated_token"
               "data": {
                   "id": 1,
                   "name": "User",
                   "email": "user@email.com"
               }
           }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
               "error": "The provided credentials are incorrect."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/auth/oauth
    metadata:
      groupName: Authentication
      groupDescription: |-

        Endpoint to manage user authentication
      subgroup: ''
      subgroupDescription: ''
      title: 'Handle the registration or login of a user via OAuth (Google or Facebook).'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      oauth:
        name: oauth
        description: 'The OAuth provider (google or facebook).'
        required: true
        example: et
        type: string
        custom: []
      oauth_id:
        name: oauth_id
        description: "The user's OAuth ID."
        required: true
        example: eos
        type: string
        custom: []
      name:
        name: name
        description: "The user's name.AAAAAAQ"
        required: true
        example: corporis
        type: string
        custom: []
      email:
        name: email
        description: "The user's email address."
        required: true
        example: hammes.karli@example.net
        type: string
        custom: []
    cleanBodyParameters:
      oauth: et
      oauth_id: eos
      name: corporis
      email: hammes.karli@example.net
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
              "token": "generated_token",
              "data": {
                  "id": 1,
                  "name": "John Doe",
                  "email": "johndoe@example.com",
              }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
