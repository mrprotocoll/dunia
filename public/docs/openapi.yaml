openapi: 3.0.3
info:
  title: 'Dunia Internal API Documentation'
  description: 'This is dunia API documentation, for internal use only'
  version: 1.0.0
servers:
  -
    url: 'http://dunia.healthyishng.com'
paths:
  /api/v1/admin/register:
    post:
      summary: 'Register a new admin.'
      operationId: registerANewAdmin
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 99e33e4a-459c-456f-8498-c51e8aa6480a
                    name: 'Joanie Murray MD'
                    email: thand@example.org
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 99e33e4a-459c-456f-8498-c51e8aa6480a
                      name:
                        type: string
                        example: 'Joanie Murray MD'
                      email:
                        type: string
                        example: thand@example.org
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Account already exist, kindly login'
                properties:
                  error:
                    type: string
                    example: 'Account already exist, kindly login'
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: ranospzln
                email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 255 characters.'
                  example: ocorwin@example.org
                password:
                  type: string
                  description: ''
                  example: autem
              required:
                - name
                - email
                - password
      security: []
  /api/v1/admin/login:
    post:
      summary: 'Admin Login.'
      operationId: adminLogin
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n     \"token\": \"generated_token\"\n     \"data\": {\n         \"id\": 1,\n         \"name\": \"User\",\n         \"email\": \"user@email.com\"\n     }\n }"
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'The provided credentials are incorrect.'
                properties:
                  error:
                    type: string
                    example: 'The provided credentials are incorrect.'
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: truecker@example.org
                password:
                  type: string
                  description: ''
                  example: '{1xfQn"W^9a8DQOg'
              required:
                - email
                - password
      security: []
  /api/v1/logout:
    post:
      summary: Logout.
      operationId: logout
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {ACCESS_TOKEN}'
          schema:
            type: string
      responses:
        204:
          description: ''
        402:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Unauthorized user'
                properties:
                  message:
                    type: string
                    example: 'Unauthorized user'
      tags:
        - Authentication
  /api/v1/register:
    post:
      summary: 'Register a new user.'
      operationId: registerANewUser
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 99e33e4a-52ff-49b1-a971-df9c58620463
                    name: 'Estrella Green'
                    email: gillian.olson@example.com
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 99e33e4a-52ff-49b1-a971-df9c58620463
                      name:
                        type: string
                        example: 'Estrella Green'
                      email:
                        type: string
                        example: gillian.olson@example.com
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: yachuuzqnnwwqexhdweroqn
                email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 255 characters.'
                  example: melissa97@example.com
                password:
                  type: string
                  description: ''
                  example: aut
              required:
                - name
                - email
                - password
      security: []
  /api/v1/login:
    post:
      summary: 'User Login.'
      operationId: userLogin
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n     \"token\": \"generated_token\"\n     \"data\": {\n         \"id\": 1,\n         \"name\": \"User\",\n         \"email\": \"user@email.com\"\n     }\n }"
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'The provided credentials are incorrect.'
                properties:
                  error:
                    type: string
                    example: 'The provided credentials are incorrect.'
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: carlie71@example.com
                password:
                  type: string
                  description: ''
                  example: '{Hp8YEv/w6$y%r'
              required:
                - email
                - password
      security: []
  /api/v1/auth/google:
    get:
      summary: 'Authenticate and log in a user using Google OAuth.'
      operationId: authenticateAndLogInAUserUsingGoogleOAuth
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n    \"token\": \"generated_token\",\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n    }\n}"
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: Unauthorized.
                properties:
                  error:
                    type: string
                    example: Unauthorized.
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Validation failed.'
                properties:
                  error:
                    type: string
                    example: 'Validation failed.'
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: 'The Google OAuth access token.'
                  example: modi
              required:
                - token
      security: []
  /api/v1/admin/authors:
    get:
      summary: 'Display a listing of the authors.'
      operationId: displayAListingOfTheAuthors
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {ACCESS_TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      id: 99e33e4a-07f9-4314-9ada-b1eb14890903
                      name: 'Jeanie Ferry MD'
                      email: casandra.daugherty@example.net
                    -
                      id: 99e33e4a-19bc-4e8b-a83b-2c254a986678
                      name: 'Edyth Erdman II'
                      email: schmidt.colleen@example.org
                properties:
                  data:
                    type: array
                    example:
                      -
                        id: 99e33e4a-07f9-4314-9ada-b1eb14890903
                        name: 'Jeanie Ferry MD'
                        email: casandra.daugherty@example.net
                      -
                        id: 99e33e4a-19bc-4e8b-a83b-2c254a986678
                        name: 'Edyth Erdman II'
                        email: schmidt.colleen@example.org
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: 99e33e4a-07f9-4314-9ada-b1eb14890903
                        name:
                          type: string
                          example: 'Jeanie Ferry MD'
                        email:
                          type: string
                          example: casandra.daugherty@example.net
      tags:
        - 'Author Management'
    post:
      summary: 'Create a new author.'
      operationId: createANewAuthor
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {ACCESS_TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 99e33e4a-1fbe-43fa-bb9f-920ff0be9f1d
                    name: 'Dr. Jordon Streich'
                    email: oconner.walker@example.org
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 99e33e4a-1fbe-43fa-bb9f-920ff0be9f1d
                      name:
                        type: string
                        example: 'Dr. Jordon Streich'
                      email:
                        type: string
                        example: oconner.walker@example.org
      tags:
        - 'Author Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Name of author.'
                  example: 'Isaac Johnson'
                email:
                  type: string
                  description: 'Email of author.'
                  example: ondricka.amya@example.org
              required:
                - name
                - email
  '/api/v1/admin/authors/{id}':
    get:
      summary: 'Display an author by ID.'
      operationId: displayAnAuthorByID
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {ACCESS_TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 99e33e4a-2433-4d68-a221-87b60325ae42
                    name: 'Mr. Bernardo Kuvalis II'
                    email: dominic57@example.net
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 99e33e4a-2433-4d68-a221-87b60325ae42
                      name:
                        type: string
                        example: 'Mr. Bernardo Kuvalis II'
                      email:
                        type: string
                        example: dominic57@example.net
      tags:
        - 'Author Management'
    put:
      summary: 'Update the specified Author by ID.'
      operationId: updateTheSpecifiedAuthorByID
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {ACCESS_TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 99e33e4a-26be-4130-b792-d38a3eea2b82
                    name: 'Miss Ayla Bednar V'
                    email: pbayer@example.org
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 99e33e4a-26be-4130-b792-d38a3eea2b82
                      name:
                        type: string
                        example: 'Miss Ayla Bednar V'
                      email:
                        type: string
                        example: pbayer@example.org
      tags:
        - 'Author Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Name of author.'
                  example: 'Isaac Johnson'
                email:
                  type: string
                  description: 'Email of author.'
                  example: lorenza89@example.org
              required:
                - name
                - email
    parameters:
      -
        in: path
        name: id
        description: 'Author ID'
        example: in
        required: true
        schema:
          type: string
  /api/v1/admin/categories:
    get:
      summary: 'Display a listing of categories.'
      operationId: displayAListingOfCategories
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {ACCESS_TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      id: 99cfdfea-c72f-451b-aed3-ec3eb26bd2c5
                      name: 'category one'
                    -
                      id: 99cfdfea-c72f-451b-aed3-ec3eb26bd2c5
                      name: 'category one'
                properties:
                  data:
                    type: array
                    example:
                      -
                        id: 99cfdfea-c72f-451b-aed3-ec3eb26bd2c5
                        name: 'category one'
                      -
                        id: 99cfdfea-c72f-451b-aed3-ec3eb26bd2c5
                        name: 'category one'
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: 99cfdfea-c72f-451b-aed3-ec3eb26bd2c5
                        name:
                          type: string
                          example: 'category one'
      tags:
        - 'Categories Management'
    post:
      summary: 'Create a new category.'
      operationId: createANewCategory
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {ACCESS_TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 99cfdfea-c72f-451b-aed3-ec3eb26bd2c5
                    name: 'category one'
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 99cfdfea-c72f-451b-aed3-ec3eb26bd2c5
                      name:
                        type: string
                        example: 'category one'
      tags:
        - 'Categories Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Name of category'
                  example: alias
              required:
                - name
  '/api/v1/admin/categories/{id}':
    get:
      summary: 'Display the specific category by ID.'
      operationId: displayTheSpecificCategoryByID
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {ACCESS_TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 99cfdfea-c72f-451b-aed3-ec3eb26bd2c5
                    name: 'category one'
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 99cfdfea-c72f-451b-aed3-ec3eb26bd2c5
                      name:
                        type: string
                        example: 'category one'
      tags:
        - 'Categories Management'
    put:
      summary: 'Update the specific category.'
      operationId: updateTheSpecificCategory
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {ACCESS_TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 99cfdfea-c72f-451b-aed3-ec3eb26bd2c5
                    name: 'category one'
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 99cfdfea-c72f-451b-aed3-ec3eb26bd2c5
                      name:
                        type: string
                        example: 'category one'
      tags:
        - 'Categories Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Name of category'
                  example: id
              required:
                - name
    parameters:
      -
        in: path
        name: id
        description: 'Category ID'
        example: vel
        required: true
        schema:
          type: string
  /api/v1/user:
    get:
      summary: ''
      operationId: getApiV1User
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
  '/api/v1/verify-email/{id}/{hash}':
    get:
      summary: 'Handle the email verification process for the authenticated user.'
      operationId: handleTheEmailVerificationProcessForTheAuthenticatedUser
      description: "Mark the authenticated user's email address as verified."
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Email verified successfully.'
                  redirect_url: 'https://frontend.example.com/home?verified=1'
                properties:
                  message:
                    type: string
                    example: 'Email verified successfully.'
                  redirect_url:
                    type: string
                    example: 'https://frontend.example.com/home?verified=1'
      tags:
        - Endpoints
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the verify email.'
        example: consequatur
        required: true
        schema:
          type: string
      -
        in: path
        name: hash
        description: ''
        example: earum
        required: true
        schema:
          type: string
  /api/v1/email/verification-notification:
    post:
      summary: 'Send an email verification notification to the user or redirect if email is already verified.'
      operationId: sendAnEmailVerificationNotificationToTheUserOrRedirectIfEmailIsAlreadyVerified
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: verification-link-sent
                properties:
                  status:
                    type: string
                    example: verification-link-sent
        302:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  redirect_url: 'https://frontend.example.com/home'
                properties:
                  redirect_url:
                    type: string
                    example: 'https://frontend.example.com/home'
      tags:
        - Endpoints
      security: []
  /api/v1/forgot-password:
    post:
      summary: "Send a password reset link to the user's email address."
      operationId: sendAPasswordResetLinkToTheUsersEmailAddress
      description: 'Handle an incoming password reset link request.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: 'Password reset link sent successfully.'
                properties:
                  status:
                    type: string
                    example: 'Password reset link sent successfully.'
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Validation failed.'
                properties:
                  error:
                    type: string
                    example: 'Validation failed.'
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: "The user's email address for password reset."
                  example: marquardt.luisa@example.org
              required:
                - email
      security: []
  /api/v1/reset-password:
    post:
      summary: 'Handle a new password request for password reset.'
      operationId: handleANewPasswordRequestForPasswordReset
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: 'Password reset successfully.'
                properties:
                  status:
                    type: string
                    example: 'Password reset successfully.'
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Validation failed.'
                properties:
                  error:
                    type: string
                    example: 'Validation failed.'
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: 'The token received for password reset.'
                  example: autem
                email:
                  type: string
                  description: "The user's email address."
                  example: otorphy@example.org
                password:
                  type: string
                  description: 'The new password.'
                  example: 'kf)i*UDT{[Slb@D'
                password_confirmation:
                  type: string
                  description: 'The confirmation of the new password.'
                  example: dolor
              required:
                - token
                - email
                - password
                - password_confirmation
      security: []
  /api/v1/order:
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Order Management'
      security: []
  /api/v1/admin/products:
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {ACCESS_TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 1
                    name: 'Sample Product'
                    author_id: 1
                    price: 19.99
                    description: 'A description of the sample product.'
                    categories:
                      -
                        id: 1
                        name: 'Category A'
                      -
                        id: 2
                        name: 'Category B'
                    tags:
                      -
                        id: 1
                        name: 'Tag X'
                      -
                        id: 2
                        name: 'Tag Y'
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: 'Sample Product'
                      author_id:
                        type: integer
                        example: 1
                      price:
                        type: number
                        example: 19.99
                      description:
                        type: string
                        example: 'A description of the sample product.'
                      categories:
                        type: array
                        example:
                          -
                            id: 1
                            name: 'Category A'
                          -
                            id: 2
                            name: 'Category B'
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            name:
                              type: string
                              example: 'Category A'
                      tags:
                        type: array
                        example:
                          -
                            id: 1
                            name: 'Tag X'
                          -
                            id: 2
                            name: 'Tag Y'
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            name:
                              type: string
                              example: 'Tag X'
      tags:
        - 'Product Management'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the product.'
                  example: modi
                images:
                  type: array
                  description: 'Must be an image. Must not be greater than 2048 kilobytes.'
                  items:
                    type: string
                    format: binary
                price:
                  type: number
                  description: 'The price of the product.'
                  example: 0.22353
                description:
                  type: string
                  description: 'The description of the product.'
                  example: 'Esse at in dolorum qui sunt in.'
                categories:
                  type: array
                  description: 'An array of category IDs associated with the product.'
                  example:
                    - accusamus
                  items:
                    type: string
                tags:
                  type: array
                  description: 'An array of tag IDs associated with the product.'
                  example:
                    - maiores
                  items:
                    type: string
                author:
                  type: integer
                  description: 'The ID of the author of the product.'
                  example: 20
                'images[]':
                  type: string
                  format: binary
                  description: 'An array of image files for the product.'
              required:
                - name
                - price
                - description
                - categories
                - tags
                - author
  '/api/v1/admin/products/{id}':
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {ACCESS_TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: null
                    name: null
                    price: '0.00'
                    description: null
                    author: null
                    categories: []
                    tags: []
                    images: []
                    reviews: []
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: null
                      name:
                        type: string
                        example: null
                      price:
                        type: string
                        example: '0.00'
                      description:
                        type: string
                        example: null
                      author:
                        type: string
                        example: null
                      categories:
                        type: array
                        example: []
                      tags:
                        type: array
                        example: []
                      images:
                        type: array
                        example: []
                      reviews:
                        type: array
                        example: []
      tags:
        - 'Product Management'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ''
                  example: unde
                images:
                  type: array
                  description: 'Must be an image. Must not be greater than 2048 kilobytes.'
                  items:
                    type: string
                    format: binary
                price:
                  type: string
                  description: ''
                  example: eaque
                description:
                  type: string
                  description: ''
                  example: qui
                categories:
                  type: array
                  description: ''
                  example: null
                  items:
                    type: string
                tags:
                  type: array
                  description: ''
                  example: null
                  items:
                    type: string
                author:
                  type: string
                  description: ''
                  example: numquam
              required:
                - name
                - price
                - description
                - author
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the product.'
        example: 99d35264-8076-49a5-a8d5-8cd88f85a773
        required: true
        schema:
          type: string
  '/api/v1/admin/products/{product_id}/images':
    post:
      summary: 'Add images to a product'
      operationId: addImagesToAProduct
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {ACCESS_TOKEN}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'Product Management'
      requestBody:
        required: false
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                images:
                  type: array
                  description: 'Must be an image. Must not be greater than 2048 kilobytes.'
                  items:
                    type: string
                    format: binary
    parameters:
      -
        in: path
        name: product_id
        description: 'The ID of the product.'
        example: 99d35264-8076-49a5-a8d5-8cd88f85a773
        required: true
        schema:
          type: string
  '/api/v1/admin/products/{product_id}/images/{productImage_id}':
    delete:
      summary: 'Delete image from product'
      operationId: deleteImageFromProduct
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {ACCESS_TOKEN}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'Product Management'
    parameters:
      -
        in: path
        name: product_id
        description: 'The ID of the product.'
        example: 99d35264-8076-49a5-a8d5-8cd88f85a773
        required: true
        schema:
          type: string
      -
        in: path
        name: productImage_id
        description: 'The ID of the productImage.'
        example: 99d35a23-2f11-406d-afde-f05b8efb9968
        required: true
        schema:
          type: string
  /api/v1/products:
    get:
      summary: 'Retrieve a paginated list of products with optional filters.'
      operationId: retrieveAPaginatedListOfProductsWithOptionalFilters
      description: ''
      parameters:
        -
          in: query
          name: name
          description: 'Search for products by name (partial match).'
          example: inventore
          required: false
          schema:
            type: string
            description: 'Search for products by name (partial match).'
            example: inventore
        -
          in: query
          name: author
          description: "Search for products by author's name."
          example: doloribus
          required: false
          schema:
            type: string
            description: "Search for products by author's name."
            example: doloribus
        -
          in: query
          name: category
          description: 'Search for products by category name.'
          example: molestiae
          required: false
          schema:
            type: string
            description: 'Search for products by category name.'
            example: molestiae
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      id: 1
                      name: 'Product A'
                      author_id: 1
                      price: 19.99
                      description: 'Description of Product A'
                      category:
                        id: 2
                        name: 'Category X'
                      author:
                        id: 1
                        name: 'Author Y'
                    -
                      id: 2
                      name: 'Product B'
                      author_id: 2
                      price: 29.99
                      description: 'Description of Product B'
                      category:
                        id: 3
                        name: 'Category Z'
                      author:
                        id: 2
                        name: 'Author Z'
                  links:
                    first: 'https://api.example.com/products?page=1'
                    last: 'https://api.example.com/products?page=3'
                    prev: null
                    next: 'https://api.example.com/products?page=2'
                  meta:
                    current_page: 1
                    from: 1
                    last_page: 3
                    path: 'https://api.example.com/products'
                    per_page: 10
                    to: 10
                    total: 25
                properties:
                  data:
                    type: array
                    example:
                      -
                        id: 1
                        name: 'Product A'
                        author_id: 1
                        price: 19.99
                        description: 'Description of Product A'
                        category:
                          id: 2
                          name: 'Category X'
                        author:
                          id: 1
                          name: 'Author Y'
                      -
                        id: 2
                        name: 'Product B'
                        author_id: 2
                        price: 29.99
                        description: 'Description of Product B'
                        category:
                          id: 3
                          name: 'Category Z'
                        author:
                          id: 2
                          name: 'Author Z'
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: 'Product A'
                        author_id:
                          type: integer
                          example: 1
                        price:
                          type: number
                          example: 19.99
                        description:
                          type: string
                          example: 'Description of Product A'
                        category:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 2
                            name:
                              type: string
                              example: 'Category X'
                        author:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            name:
                              type: string
                              example: 'Author Y'
                  links:
                    type: object
                    properties:
                      first:
                        type: string
                        example: 'https://api.example.com/products?page=1'
                      last:
                        type: string
                        example: 'https://api.example.com/products?page=3'
                      prev:
                        type: string
                        example: null
                      next:
                        type: string
                        example: 'https://api.example.com/products?page=2'
                  meta:
                    type: object
                    properties:
                      current_page:
                        type: integer
                        example: 1
                      from:
                        type: integer
                        example: 1
                      last_page:
                        type: integer
                        example: 3
                      path:
                        type: string
                        example: 'https://api.example.com/products'
                      per_page:
                        type: integer
                        example: 10
                      to:
                        type: integer
                        example: 10
                      total:
                        type: integer
                        example: 25
      tags:
        - 'Product Management'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ''
                  example: tenetur
                images:
                  type: array
                  description: 'Must be an image. Must not be greater than 2048 kilobytes.'
                  items:
                    type: string
                    format: binary
                price:
                  type: string
                  description: ''
                  example: aut
                description:
                  type: string
                  description: ''
                  example: qui
                categories:
                  type: array
                  description: ''
                  example: null
                  items:
                    type: string
                tags:
                  type: array
                  description: ''
                  example: null
                  items:
                    type: string
                author:
                  type: string
                  description: ''
                  example: rem
              required:
                - name
                - price
                - description
                - author
      security: []
  '/api/v1/products/{id}':
    get:
      summary: 'Display a specific product by ID.'
      operationId: displayASpecificProductByID
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: null
                    name: null
                    price: '0.00'
                    description: null
                    author: null
                    categories: []
                    tags: []
                    images: []
                    reviews: []
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: null
                      name:
                        type: string
                        example: null
                      price:
                        type: string
                        example: '0.00'
                      description:
                        type: string
                        example: null
                      author:
                        type: string
                        example: null
                      categories:
                        type: array
                        example: []
                      tags:
                        type: array
                        example: []
                      images:
                        type: array
                        example: []
                      reviews:
                        type: array
                        example: []
      tags:
        - 'Product Management'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Product ID'
        example: suscipit
        required: true
        schema:
          type: string
  '/api/v1/products/{product_id}/reviews':
    post:
      summary: 'Create a new review for a product.'
      operationId: createANewReviewForAProduct
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {ACCESS_TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 99ddc991-b5ea-4985-9733-ed9a4b459c0e
                    user:
                      id: 99cf69a0-2af8-4baf-bb7a-69fc531e9660
                      name: admin
                      email: admin@gmail.com
                    comment: 'lorem ipsum'
                    rating: '4'
                    createdAt: '2023-08-11T18:28:05.000000Z'
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 99ddc991-b5ea-4985-9733-ed9a4b459c0e
                      user:
                        type: object
                        properties:
                          id:
                            type: string
                            example: 99cf69a0-2af8-4baf-bb7a-69fc531e9660
                          name:
                            type: string
                            example: admin
                          email:
                            type: string
                            example: admin@gmail.com
                      comment:
                        type: string
                        example: 'lorem ipsum'
                      rating:
                        type: string
                        example: '4'
                      createdAt:
                        type: string
                        example: '2023-08-11T18:28:05.000000Z'
      tags:
        - 'Product Review'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
                  description: 'The comment for the review.'
                  example: perferendis
                rating:
                  type: integer
                  description: 'The rating for the review (0-5).'
                  example: 17
              required:
                - comment
                - rating
    parameters:
      -
        in: path
        name: product_id
        description: 'The ID of the product.'
        example: 99d35264-8076-49a5-a8d5-8cd88f85a773
        required: true
        schema:
          type: string
  /api/v1/admin/tags:
    get:
      summary: 'Display a listing of the tags.'
      operationId: displayAListingOfTheTags
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      id: null
                      name: null
                    -
                      id: null
                      name: null
                properties:
                  data:
                    type: array
                    example:
                      -
                        id: null
                        name: null
                      -
                        id: null
                        name: null
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: null
                        name:
                          type: string
                          example: null
      tags:
        - 'Tags Management'
      security: []
    post:
      summary: 'Create a new Tag.'
      operationId: createANewTag
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: null
                    name: null
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: null
                      name:
                        type: string
                        example: null
      tags:
        - 'Tags Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 100 characters.'
                  example: zuvlat
              required:
                - name
      security: []
  '/api/v1/admin/tags/{id}':
    get:
      summary: 'Display the specific tag by ID.'
      operationId: displayTheSpecificTagByID
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: null
                    name: null
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: null
                      name:
                        type: string
                        example: null
      tags:
        - 'Tags Management'
      security: []
    put:
      summary: 'Update a specific tag by ID.'
      operationId: updateASpecificTagByID
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: null
                    name: null
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: null
                      name:
                        type: string
                        example: null
      tags:
        - 'Tags Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 100 characters.'
                  example: eqvmyhbmzurgz
              required:
                - name
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the tag.'
        example: 99cfd9ed-a48a-40d9-b896-4549d534fb7a
        required: true
        schema:
          type: string
tags:
  -
    name: Authentication
    description: "\nEndpoint to manage user authentication"
  -
    name: 'Author Management'
    description: "\nEndpoint to manage authors"
  -
    name: 'Categories Management'
    description: ''
  -
    name: Endpoints
    description: ''
  -
    name: 'Order Management'
    description: "\nEndpoint to manage customers orders"
  -
    name: 'Product Management'
    description: "\nEndpoints to manage products"
  -
    name: 'Product Review'
    description: "\ncustomer review on a product"
  -
    name: 'Tags Management'
    description: "\nEndpoint to manage tags"
components:
  securitySchemes:
    default:
      type: http
      scheme: bearer
      description: ''
security:
  -
    default: []
