openapi: 3.0.3
info:
  title: 'Dunia Internal API Documentation'
  description: 'This is dunia API documentation, for internal use only'
  version: 1.0.0
servers:
  -
    url: 'http://localhost'
paths:
  /api/v1/register:
    post:
      summary: 'Register a new user.'
      operationId: registerANewUser
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 99dd90a2-71f6-49c9-9ff7-b63895baf767
                    name: 'Mr. Jerel Walter PhD'
                    email: gabrielle.miller@example.com
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 99dd90a2-71f6-49c9-9ff7-b63895baf767
                      name:
                        type: string
                        example: 'Mr. Jerel Walter PhD'
                      email:
                        type: string
                        example: gabrielle.miller@example.com
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Account already exist, kindly login'
                properties:
                  error:
                    type: string
                    example: 'Account already exist, kindly login'
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ''
                  example: eos
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: annabell02@example.org
                password:
                  type: string
                  description: ''
                  example: '<TY3!O''n\J2-xLa`i'
              required:
                - name
                - email
                - password
      security: []
  /api/v1/login:
    post:
      summary: Login.
      operationId: login
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n     \"token\": \"generated_token\"\n     \"data\": {\n         \"id\": 1,\n         \"name\": \"User\",\n         \"email\": \"user@email.com\"\n     }\n }"
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'The provided credentials are incorrect.'
                properties:
                  error:
                    type: string
                    example: 'The provided credentials are incorrect.'
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: paul.baumbach@example.com
                password:
                  type: string
                  description: ''
                  example: '><V}I"DNm^`)1<+P'
              required:
                - email
                - password
      security: []
  /api/v1/logout:
    get:
      summary: Logout.
      operationId: logout
      description: ''
      parameters: []
      responses:
        204:
          description: ''
        402:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Unauthorized user'
                properties:
                  message:
                    type: string
                    example: 'Unauthorized user'
      tags:
        - Authentication
      security: []
  /api/v1/admin/authors:
    get:
      summary: 'Display a listing of the authors.'
      operationId: displayAListingOfTheAuthors
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      id: 99dd90a2-2c19-4d23-aff3-a9a3d4180c26
                      name: 'Patricia Pfeffer'
                      email: lacy.medhurst@example.org
                    -
                      id: 99dd90a2-3b36-4e9e-8663-db6efca23bb4
                      name: 'Myrtice Wehner'
                      email: rosina32@example.net
                properties:
                  data:
                    type: array
                    example:
                      -
                        id: 99dd90a2-2c19-4d23-aff3-a9a3d4180c26
                        name: 'Patricia Pfeffer'
                        email: lacy.medhurst@example.org
                      -
                        id: 99dd90a2-3b36-4e9e-8663-db6efca23bb4
                        name: 'Myrtice Wehner'
                        email: rosina32@example.net
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: 99dd90a2-2c19-4d23-aff3-a9a3d4180c26
                        name:
                          type: string
                          example: 'Patricia Pfeffer'
                        email:
                          type: string
                          example: lacy.medhurst@example.org
      tags:
        - 'Author Management'
      security: []
    post:
      summary: 'Create a new author.'
      operationId: createANewAuthor
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 99dd90a2-486f-4793-a344-3fab14a3ee75
                    name: 'Mollie Monahan V'
                    email: hilpert.margarita@example.net
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 99dd90a2-486f-4793-a344-3fab14a3ee75
                      name:
                        type: string
                        example: 'Mollie Monahan V'
                      email:
                        type: string
                        example: hilpert.margarita@example.net
      tags:
        - 'Author Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Name of author.'
                  example: 'Isaac Johnson'
                email:
                  type: string
                  description: 'Email of author.'
                  example: omraz@example.com
              required:
                - name
                - email
      security: []
  '/api/v1/admin/authors/{id}':
    get:
      summary: 'Display an author by ID.'
      operationId: displayAnAuthorByID
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 99dd90a2-4cb6-42d0-8b77-e9cfa2ec5e82
                    name: 'Dr. Antwan Streich'
                    email: tremblay.blanche@example.net
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 99dd90a2-4cb6-42d0-8b77-e9cfa2ec5e82
                      name:
                        type: string
                        example: 'Dr. Antwan Streich'
                      email:
                        type: string
                        example: tremblay.blanche@example.net
      tags:
        - 'Author Management'
      security: []
    put:
      summary: 'Update the specified Author by ID.'
      operationId: updateTheSpecifiedAuthorByID
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 99dd90a2-4f3f-426d-b41a-dc4e959240d1
                    name: 'Bruce Bauch'
                    email: thilpert@example.com
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 99dd90a2-4f3f-426d-b41a-dc4e959240d1
                      name:
                        type: string
                        example: 'Bruce Bauch'
                      email:
                        type: string
                        example: thilpert@example.com
      tags:
        - 'Author Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Name of author.'
                  example: 'Isaac Johnson'
                email:
                  type: string
                  description: 'Email of author.'
                  example: darrion.kuvalis@example.org
              required:
                - name
                - email
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Author ID'
        example: illo
        required: true
        schema:
          type: string
  /api/v1/admin/categories:
    get:
      summary: 'Display a listing of categories.'
      operationId: displayAListingOfCategories
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      id: 99cfdfea-c72f-451b-aed3-ec3eb26bd2c5
                      name: 'category one'
                    -
                      id: 99cfdfea-c72f-451b-aed3-ec3eb26bd2c5
                      name: 'category one'
                properties:
                  data:
                    type: array
                    example:
                      -
                        id: 99cfdfea-c72f-451b-aed3-ec3eb26bd2c5
                        name: 'category one'
                      -
                        id: 99cfdfea-c72f-451b-aed3-ec3eb26bd2c5
                        name: 'category one'
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: 99cfdfea-c72f-451b-aed3-ec3eb26bd2c5
                        name:
                          type: string
                          example: 'category one'
      tags:
        - 'Categories Management'
      security: []
    post:
      summary: 'Create a new category.'
      operationId: createANewCategory
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 99cfdfea-c72f-451b-aed3-ec3eb26bd2c5
                    name: 'category one'
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 99cfdfea-c72f-451b-aed3-ec3eb26bd2c5
                      name:
                        type: string
                        example: 'category one'
      tags:
        - 'Categories Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Name of category'
                  example: libero
              required:
                - name
      security: []
  '/api/v1/admin/categories/{id}':
    get:
      summary: 'Display the specific category by ID.'
      operationId: displayTheSpecificCategoryByID
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 99cfdfea-c72f-451b-aed3-ec3eb26bd2c5
                    name: 'category one'
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 99cfdfea-c72f-451b-aed3-ec3eb26bd2c5
                      name:
                        type: string
                        example: 'category one'
      tags:
        - 'Categories Management'
      security: []
    put:
      summary: 'Update the specific category.'
      operationId: updateTheSpecificCategory
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 99cfdfea-c72f-451b-aed3-ec3eb26bd2c5
                    name: 'category one'
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 99cfdfea-c72f-451b-aed3-ec3eb26bd2c5
                      name:
                        type: string
                        example: 'category one'
      tags:
        - 'Categories Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Name of category'
                  example: impedit
              required:
                - name
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Category ID'
        example: fugiat
        required: true
        schema:
          type: string
  /api/v1/user:
    get:
      summary: ''
      operationId: getApiV1User
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
  /api/v1/user/user:
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Order Management'
      security: []
  /api/v1/admin/products:
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 1
                    name: 'Sample Product'
                    author_id: 1
                    price: 19.99
                    description: 'A description of the sample product.'
                    categories:
                      -
                        id: 1
                        name: 'Category A'
                      -
                        id: 2
                        name: 'Category B'
                    tags:
                      -
                        id: 1
                        name: 'Tag X'
                      -
                        id: 2
                        name: 'Tag Y'
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: 'Sample Product'
                      author_id:
                        type: integer
                        example: 1
                      price:
                        type: number
                        example: 19.99
                      description:
                        type: string
                        example: 'A description of the sample product.'
                      categories:
                        type: array
                        example:
                          -
                            id: 1
                            name: 'Category A'
                          -
                            id: 2
                            name: 'Category B'
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            name:
                              type: string
                              example: 'Category A'
                      tags:
                        type: array
                        example:
                          -
                            id: 1
                            name: 'Tag X'
                          -
                            id: 2
                            name: 'Tag Y'
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            name:
                              type: string
                              example: 'Tag X'
      tags:
        - 'Product Management'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the product.'
                  example: velit
                images:
                  type: array
                  description: 'Must be an image. Must not be greater than 2048 kilobytes.'
                  items:
                    type: string
                    format: binary
                price:
                  type: number
                  description: 'The price of the product.'
                  example: 207770.817712
                description:
                  type: string
                  description: 'The description of the product.'
                  example: 'Voluptatem pariatur aut dolorum ipsam eaque aut.'
                categories:
                  type: array
                  description: 'An array of category IDs associated with the product.'
                  example:
                    - voluptatem
                  items:
                    type: string
                tags:
                  type: array
                  description: 'An array of tag IDs associated with the product.'
                  example:
                    - facere
                  items:
                    type: string
                author:
                  type: integer
                  description: 'The ID of the author of the product.'
                  example: 4
                'images[]':
                  type: string
                  format: binary
                  description: 'An array of image files for the product.'
              required:
                - name
                - price
                - description
                - categories
                - tags
                - author
      security: []
  '/api/v1/admin/products/{id}':
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: null
                    name: null
                    price: '0.00'
                    description: null
                    author: null
                    categories: []
                    tags: []
                    images: []
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: null
                      name:
                        type: string
                        example: null
                      price:
                        type: string
                        example: '0.00'
                      description:
                        type: string
                        example: null
                      author:
                        type: string
                        example: null
                      categories:
                        type: array
                        example: []
                      tags:
                        type: array
                        example: []
                      images:
                        type: array
                        example: []
      tags:
        - 'Product Management'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ''
                  example: fugit
                images:
                  type: array
                  description: 'Must be an image. Must not be greater than 2048 kilobytes.'
                  items:
                    type: string
                    format: binary
                price:
                  type: string
                  description: ''
                  example: et
                description:
                  type: string
                  description: ''
                  example: sunt
                categories:
                  type: array
                  description: ''
                  example: null
                  items:
                    type: string
                tags:
                  type: array
                  description: ''
                  example: null
                  items:
                    type: string
                author:
                  type: string
                  description: ''
                  example: dolores
              required:
                - name
                - price
                - description
                - author
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the product.'
        example: 99d35264-8076-49a5-a8d5-8cd88f85a773
        required: true
        schema:
          type: string
  '/api/v1/admin/products/{product_id}/images':
    post:
      summary: 'Add images to a product'
      operationId: addImagesToAProduct
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Product Management'
      requestBody:
        required: false
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                images:
                  type: array
                  description: 'Must be an image. Must not be greater than 2048 kilobytes.'
                  items:
                    type: string
                    format: binary
      security: []
    parameters:
      -
        in: path
        name: product_id
        description: 'The ID of the product.'
        example: 99d35264-8076-49a5-a8d5-8cd88f85a773
        required: true
        schema:
          type: string
  '/api/v1/admin/products/{product_id}/images/{productImage_id}':
    delete:
      summary: 'Delete image from product'
      operationId: deleteImageFromProduct
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Product Management'
      security: []
    parameters:
      -
        in: path
        name: product_id
        description: 'The ID of the product.'
        example: 99d35264-8076-49a5-a8d5-8cd88f85a773
        required: true
        schema:
          type: string
      -
        in: path
        name: productImage_id
        description: 'The ID of the productImage.'
        example: 99d35a23-2f11-406d-afde-f05b8efb9968
        required: true
        schema:
          type: string
  /api/v1/products:
    get:
      summary: 'Display a listing of products'
      operationId: displayAListingOfProducts
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      id: null
                      name: null
                      price: '0.00'
                      description: null
                      author: null
                      categories: []
                      tags: []
                      images: []
                    -
                      id: null
                      name: null
                      price: '0.00'
                      description: null
                      author: null
                      categories: []
                      tags: []
                      images: []
                properties:
                  data:
                    type: array
                    example:
                      -
                        id: null
                        name: null
                        price: '0.00'
                        description: null
                        author: null
                        categories: []
                        tags: []
                        images: []
                      -
                        id: null
                        name: null
                        price: '0.00'
                        description: null
                        author: null
                        categories: []
                        tags: []
                        images: []
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: null
                        name:
                          type: string
                          example: null
                        price:
                          type: string
                          example: '0.00'
                        description:
                          type: string
                          example: null
                        author:
                          type: string
                          example: null
                        categories:
                          type: array
                          example: []
                        tags:
                          type: array
                          example: []
                        images:
                          type: array
                          example: []
      tags:
        - 'Product Management'
      security: []
  '/api/v1/products/{id}':
    get:
      summary: 'Display a specific product by ID.'
      operationId: displayASpecificProductByID
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: null
                    name: null
                    price: '0.00'
                    description: null
                    author: null
                    categories: []
                    tags: []
                    images: []
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: null
                      name:
                        type: string
                        example: null
                      price:
                        type: string
                        example: '0.00'
                      description:
                        type: string
                        example: null
                      author:
                        type: string
                        example: null
                      categories:
                        type: array
                        example: []
                      tags:
                        type: array
                        example: []
                      images:
                        type: array
                        example: []
      tags:
        - 'Product Management'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Product ID'
        example: eius
        required: true
        schema:
          type: string
  /api/v1/admin/tags:
    get:
      summary: 'Display a listing of the tags.'
      operationId: displayAListingOfTheTags
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      id: null
                      name: null
                    -
                      id: null
                      name: null
                properties:
                  data:
                    type: array
                    example:
                      -
                        id: null
                        name: null
                      -
                        id: null
                        name: null
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: null
                        name:
                          type: string
                          example: null
      tags:
        - 'Tags Management'
      security: []
    post:
      summary: 'Create a new Tag.'
      operationId: createANewTag
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: null
                    name: null
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: null
                      name:
                        type: string
                        example: null
      tags:
        - 'Tags Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 100 characters.'
                  example: vwdawtvhxhlxmqm
              required:
                - name
      security: []
  '/api/v1/admin/tags/{id}':
    get:
      summary: 'Display the specific tag by ID.'
      operationId: displayTheSpecificTagByID
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: null
                    name: null
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: null
                      name:
                        type: string
                        example: null
      tags:
        - 'Tags Management'
      security: []
    put:
      summary: 'Update a specific tag by ID.'
      operationId: updateASpecificTagByID
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: null
                    name: null
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: null
                      name:
                        type: string
                        example: null
      tags:
        - 'Tags Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 100 characters.'
                  example: fvsfszuvegfslhcotgzf
              required:
                - name
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the tag.'
        example: 99cfd9ed-a48a-40d9-b896-4549d534fb7a
        required: true
        schema:
          type: string
tags:
  -
    name: Authentication
    description: "\nEndpoint to manage user authentication"
  -
    name: 'Author Management'
    description: "\nEndpoint to manage authors"
  -
    name: 'Categories Management'
    description: "\nEndpoint to manage categories"
  -
    name: Endpoints
    description: ''
  -
    name: 'Order Management'
    description: "\nEndpoint to manage customers orders"
  -
    name: 'Product Management'
    description: "\nEndpoints to manage products"
  -
    name: 'Tags Management'
    description: "\nEndpoint to manage tags"
components:
  securitySchemes:
    default:
      type: http
      scheme: bearer
      description: ''
security:
  -
    default: []
