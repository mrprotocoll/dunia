openapi: 3.0.3
info:
  title: 'Dunia Internal API Documentation'
  description: 'This is dunia API documentation, for internal use only'
  version: 1.0.0
servers:
  -
    url: 'http://dunia.healthyishng.com'
paths:
  /api/v1/admin/register:
    post:
      summary: 'Register a new admin.'
      operationId: registerANewAdmin
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 99f6280e-e964-4663-b2fd-9798e64274d0
                    name: 'Desmond Bernhard'
                    email: west.ariane@example.org
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 99f6280e-e964-4663-b2fd-9798e64274d0
                      name:
                        type: string
                        example: 'Desmond Bernhard'
                      email:
                        type: string
                        example: west.ariane@example.org
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Account already exist, kindly login'
                properties:
                  error:
                    type: string
                    example: 'Account already exist, kindly login'
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: tggxlaigqveexzwyhtlawunrz
                email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 255 characters.'
                  example: corkery.pedro@example.com
                password:
                  type: string
                  description: ''
                  example: reprehenderit
              required:
                - name
                - email
                - password
      security: []
  /api/v1/admin/login:
    post:
      summary: 'Admin Login.'
      operationId: adminLogin
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n     \"token\": \"generated_token\"\n     \"data\": {\n         \"id\": 1,\n         \"name\": \"User\",\n         \"email\": \"user@email.com\"\n     }\n }"
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'The provided credentials are incorrect.'
                properties:
                  error:
                    type: string
                    example: 'The provided credentials are incorrect.'
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: hilpert.lilyan@example.com
                password:
                  type: string
                  description: ''
                  example: )xYIq/o
              required:
                - email
                - password
      security: []
  /api/v1/logout:
    post:
      summary: Logout.
      operationId: logout
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {ACCESS_TOKEN}'
          schema:
            type: string
      responses:
        204:
          description: ''
        402:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Unauthorized user'
                properties:
                  message:
                    type: string
                    example: 'Unauthorized user'
      tags:
        - Authentication
  /api/v1/register:
    post:
      summary: 'Register a new user.'
      operationId: registerANewUser
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 99f6280e-fba8-4a69-b756-c6dad1b57d9c
                    name: 'Dr. Arnold Botsford'
                    email: hailee06@example.net
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 99f6280e-fba8-4a69-b756-c6dad1b57d9c
                      name:
                        type: string
                        example: 'Dr. Arnold Botsford'
                      email:
                        type: string
                        example: hailee06@example.net
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: phthiutalqklzjhgfdlwruy
                email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 255 characters.'
                  example: kianna70@example.org
                password:
                  type: string
                  description: ''
                  example: consectetur
              required:
                - name
                - email
                - password
      security: []
  /api/v1/login:
    post:
      summary: 'User Login.'
      operationId: userLogin
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n     \"token\": \"generated_token\"\n     \"data\": {\n         \"id\": 1,\n         \"name\": \"User\",\n         \"email\": \"user@email.com\"\n     }\n }"
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'The provided credentials are incorrect.'
                properties:
                  error:
                    type: string
                    example: 'The provided credentials are incorrect.'
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: lennie03@example.net
                password:
                  type: string
                  description: ''
                  example: 'iQH]!^X_&S6[\g9N$XT5'
              required:
                - email
                - password
      security: []
  /api/v1/auth/oauth:
    post:
      summary: 'Handle the registration or login of a user via OAuth (Google or Facebook).'
      operationId: handleTheRegistrationOrLoginOfAUserViaOAuthGoogleOrFacebook
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n    \"token\": \"generated_token\",\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n    }\n}"
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oauth:
                  type: string
                  description: 'The OAuth provider (google or facebook).'
                  example: cupiditate
                oauth_id:
                  type: string
                  description: "The user's OAuth ID."
                  example: inventore
                name:
                  type: string
                  description: "The user's name.AAAAAAQ"
                  example: voluptatem
                email:
                  type: string
                  description: "The user's email address."
                  example: stroman.christ@example.org
              required:
                - oauth
                - oauth_id
                - name
                - email
      security: []
  /api/v1/admin/authors:
    get:
      summary: 'Display a listing of the authors.'
      operationId: displayAListingOfTheAuthors
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {ACCESS_TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      id: 99f6280e-c2cd-4616-ad07-8d7111e9f7e7
                      name: 'Theodora Predovic'
                      email: lwitting@example.com
                      description: null
                    -
                      id: 99f6280e-c681-495d-8e44-2ff6fd73c859
                      name: 'Melany Jacobs'
                      email: harmon14@example.com
                      description: null
                properties:
                  data:
                    type: array
                    example:
                      -
                        id: 99f6280e-c2cd-4616-ad07-8d7111e9f7e7
                        name: 'Theodora Predovic'
                        email: lwitting@example.com
                        description: null
                      -
                        id: 99f6280e-c681-495d-8e44-2ff6fd73c859
                        name: 'Melany Jacobs'
                        email: harmon14@example.com
                        description: null
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: 99f6280e-c2cd-4616-ad07-8d7111e9f7e7
                        name:
                          type: string
                          example: 'Theodora Predovic'
                        email:
                          type: string
                          example: lwitting@example.com
                        description:
                          type: string
                          example: null
      tags:
        - 'Author Management'
    post:
      summary: 'Create a new author.'
      operationId: createANewAuthor
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {ACCESS_TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 99f6280e-cd9c-41bd-b6c8-2f2fe705db8f
                    name: 'Dr. Darion Marks'
                    email: uhamill@example.com
                    description: null
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 99f6280e-cd9c-41bd-b6c8-2f2fe705db8f
                      name:
                        type: string
                        example: 'Dr. Darion Marks'
                      email:
                        type: string
                        example: uhamill@example.com
                      description:
                        type: string
                        example: null
      tags:
        - 'Author Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Name of author.'
                  example: 'Isaac Johnson'
                email:
                  type: string
                  description: 'Email of author.'
                  example: toy.layla@example.com
                description:
                  type: string
                  description: ''
                  example: 'Omnis accusamus quo quia sequi harum repellat a.'
              required:
                - name
                - email
  '/api/v1/admin/authors/{id}':
    get:
      summary: 'Display an author by ID.'
      operationId: displayAnAuthorByID
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {ACCESS_TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 99f6280e-d0bb-4aa3-a3a3-d17d7cca2ac4
                    name: "Casimir O'Keefe DDS"
                    email: olang@example.com
                    description: null
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 99f6280e-d0bb-4aa3-a3a3-d17d7cca2ac4
                      name:
                        type: string
                        example: "Casimir O'Keefe DDS"
                      email:
                        type: string
                        example: olang@example.com
                      description:
                        type: string
                        example: null
      tags:
        - 'Author Management'
    put:
      summary: 'Update the specified Author by ID.'
      operationId: updateTheSpecifiedAuthorByID
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {ACCESS_TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 99f6280e-d2c7-4f33-a148-38bb9420a503
                    name: 'Elena Keeling'
                    email: mason06@example.com
                    description: null
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 99f6280e-d2c7-4f33-a148-38bb9420a503
                      name:
                        type: string
                        example: 'Elena Keeling'
                      email:
                        type: string
                        example: mason06@example.com
                      description:
                        type: string
                        example: null
      tags:
        - 'Author Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Name of author.'
                  example: 'Isaac Johnson'
                email:
                  type: string
                  description: 'Email of author.'
                  example: iwilkinson@example.org
                description:
                  type: string
                  description: ''
                  example: 'Et consequatur possimus veritatis illo dolores ut.'
              required:
                - name
                - email
    parameters:
      -
        in: path
        name: id
        description: 'Author ID'
        example: quaerat
        required: true
        schema:
          type: string
  /api/v1/billingAddresses:
    get:
      summary: 'Get all customer Billing addresses'
      operationId: getAllCustomerBillingAddresses
      description: 'Retrieve the billing addresses associated with the currently authenticated user.'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {ACCESS_TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n    \"data\": [\n        {\n            \"id\": 1,\n            \"country\": {...},\n            \"address\": \"123 Main St\",\n            \"city\": {...},\n            \"state\": {...},\n        },\n        ...\n    ]\n}"
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Oops something went wrong'
                properties:
                  message:
                    type: string
                    example: 'Oops something went wrong'
      tags:
        - 'Billing Address'
    post:
      summary: "Create billing address\nStore a new billing address for the currently authenticated user."
      operationId: createBillingAddressStoreANewBillingAddressForTheCurrentlyAuthenticatedUser
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {ACCESS_TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n    \"data\": {\n        \"id\": 1,\n        \"country\": {...},\n        \"address\": \"123 Main St\",\n        \"city\": {...},\n        \"state\": {...},\n    },\n    \"message\": \"Billing address created successfully\"\n}"
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Oops something went wrong'
                properties:
                  message:
                    type: string
                    example: 'Oops something went wrong'
      tags:
        - 'Billing Address'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                country:
                  type: integer
                  description: 'The ID of the country for the address.'
                  example: 7
                state:
                  type: integer
                  description: 'The ID of the state for the address.'
                  example: 3
                city:
                  type: integer
                  description: 'The ID of the city for the address.'
                  example: 18
                address:
                  type: string
                  description: 'The address information.'
                  example: atque
              required:
                - country
                - state
                - city
                - address
  '/api/v1/billingAddresses/{id}':
    put:
      summary: "Update billing address\nUpdate an existing billing address for the currently authenticated user."
      operationId: updateBillingAddressUpdateAnExistingBillingAddressForTheCurrentlyAuthenticatedUser
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {ACCESS_TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n    \"data\": {\n        \"id\": 1,\n        \"country\": {...},\n        \"address\": \"123 Main St\",\n        \"city\": {...},\n        \"state\": {...},\n    },\n    \"message\": \"Billing address updated successfully\"\n}"
        422:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n    \"errors\": {...}\n}"
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Oops something went wrong'
                properties:
                  message:
                    type: string
                    example: 'Oops something went wrong'
      tags:
        - 'Billing Address'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                country:
                  type: integer
                  description: 'The ID of the country for the address.'
                  example: 8
                state:
                  type: integer
                  description: 'The ID of the state for the address.'
                  example: 2
                city:
                  type: integer
                  description: 'The ID of the city for the address.'
                  example: 5
                address:
                  type: string
                  description: 'The address information.'
                  example: dicta
              required:
                - country
                - state
                - city
                - address
    delete:
      summary: 'Delete a billing address.'
      operationId: deleteABillingAddress
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Billing address deleted successfully'
                properties:
                  message:
                    type: string
                    example: 'Billing address deleted successfully'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Billing address not found'
                properties:
                  message:
                    type: string
                    example: 'Billing address not found'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Oops something went wrong'
                properties:
                  message:
                    type: string
                    example: 'Oops something went wrong'
      tags:
        - 'Billing Address'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the billingAddress.'
        example: 99e5413a-ffc7-4a30-847e-031d4b4ac187
        required: true
        schema:
          type: string
  /api/v1/admin/categories:
    get:
      summary: 'Display a listing of categories.'
      operationId: displayAListingOfCategories
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {ACCESS_TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      id: 99cfdfea-c72f-451b-aed3-ec3eb26bd2c5
                      name: 'category one'
                    -
                      id: 99cfdfea-c72f-451b-aed3-ec3eb26bd2c5
                      name: 'category one'
                properties:
                  data:
                    type: array
                    example:
                      -
                        id: 99cfdfea-c72f-451b-aed3-ec3eb26bd2c5
                        name: 'category one'
                      -
                        id: 99cfdfea-c72f-451b-aed3-ec3eb26bd2c5
                        name: 'category one'
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: 99cfdfea-c72f-451b-aed3-ec3eb26bd2c5
                        name:
                          type: string
                          example: 'category one'
      tags:
        - 'Categories Management'
    post:
      summary: 'Create a new category.'
      operationId: createANewCategory
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {ACCESS_TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 99cfdfea-c72f-451b-aed3-ec3eb26bd2c5
                    name: 'category one'
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 99cfdfea-c72f-451b-aed3-ec3eb26bd2c5
                      name:
                        type: string
                        example: 'category one'
      tags:
        - 'Categories Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Name of category'
                  example: quis
              required:
                - name
  '/api/v1/admin/categories/{id}':
    get:
      summary: 'Display the specific category by ID.'
      operationId: displayTheSpecificCategoryByID
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {ACCESS_TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 99cfdfea-c72f-451b-aed3-ec3eb26bd2c5
                    name: 'category one'
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 99cfdfea-c72f-451b-aed3-ec3eb26bd2c5
                      name:
                        type: string
                        example: 'category one'
      tags:
        - 'Categories Management'
    put:
      summary: 'Update the specific category.'
      operationId: updateTheSpecificCategory
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {ACCESS_TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 99cfdfea-c72f-451b-aed3-ec3eb26bd2c5
                    name: 'category one'
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 99cfdfea-c72f-451b-aed3-ec3eb26bd2c5
                      name:
                        type: string
                        example: 'category one'
      tags:
        - 'Categories Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Name of category'
                  example: molestiae
              required:
                - name
    parameters:
      -
        in: path
        name: id
        description: 'Category ID'
        example: error
        required: true
        schema:
          type: string
  '/api/v1/verify-email/{id}/{hash}':
    get:
      summary: 'Handle the email verification process for the authenticated user.'
      operationId: handleTheEmailVerificationProcessForTheAuthenticatedUser
      description: "Mark the authenticated user's email address as verified."
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Email verified successfully.'
                  redirect_url: 'https://frontend.example.com/home?verified=1'
                properties:
                  message:
                    type: string
                    example: 'Email verified successfully.'
                  redirect_url:
                    type: string
                    example: 'https://frontend.example.com/home?verified=1'
      tags:
        - Endpoints
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the verify email.'
        example: itaque
        required: true
        schema:
          type: string
      -
        in: path
        name: hash
        description: ''
        example: enim
        required: true
        schema:
          type: string
  /api/v1/email/verification-notification:
    post:
      summary: 'Send an email verification notification to the user or redirect if email is already verified.'
      operationId: sendAnEmailVerificationNotificationToTheUserOrRedirectIfEmailIsAlreadyVerified
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: verification-link-sent
                properties:
                  status:
                    type: string
                    example: verification-link-sent
        302:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  redirect_url: 'https://frontend.example.com/home'
                properties:
                  redirect_url:
                    type: string
                    example: 'https://frontend.example.com/home'
      tags:
        - Endpoints
      security: []
  /api/v1/forgot-password:
    post:
      summary: "Send a password reset link to the user's email address."
      operationId: sendAPasswordResetLinkToTheUsersEmailAddress
      description: 'Handle an incoming password reset link request.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: 'Password reset link sent successfully.'
                properties:
                  status:
                    type: string
                    example: 'Password reset link sent successfully.'
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Validation failed.'
                properties:
                  error:
                    type: string
                    example: 'Validation failed.'
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: "The user's email address for password reset."
                  example: yrippin@example.com
              required:
                - email
      security: []
  /api/v1/reset-password:
    post:
      summary: 'Handle a new password request for password reset.'
      operationId: handleANewPasswordRequestForPasswordReset
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: 'Password reset successfully.'
                properties:
                  status:
                    type: string
                    example: 'Password reset successfully.'
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Validation failed.'
                properties:
                  error:
                    type: string
                    example: 'Validation failed.'
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: 'The token received for password reset.'
                  example: sint
                email:
                  type: string
                  description: "The user's email address."
                  example: farrell.robyn@example.net
                password:
                  type: string
                  description: 'The new password.'
                  example: 0+3iQ9!QFM^-e
                password_confirmation:
                  type: string
                  description: 'The confirmation of the new password.'
                  example: quas
              required:
                - token
                - email
                - password
                - password_confirmation
      security: []
  /api/v1/order:
    get:
      summary: 'Retrieve a paginated list of orders for the currently authenticated customer.'
      operationId: retrieveAPaginatedListOfOrdersForTheCurrentlyAuthenticatedCustomer
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {ACCESS_TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n    \"data\": [\n        {\n            \"id\": 1,\n            \"user\": {\n                \"id\": 2,\n                \"name\": \"John Doe\",\n                \"email\": \"johndoe@example.com\"\n            },\n            \"cart\": [...],\n        },\n        ...\n    ],\n    \"links\": {\n        \"first\": \"...\",\n        \"last\": \"...\",\n        \"prev\": null,\n        \"next\": \"...\"\n    },\n    \"meta\": {\n        \"current_page\": 1,\n        \"from\": 1,\n        \"last_page\": 3,\n        \"path\": \"...\",\n        \"per_page\": 10,\n        \"to\": 10,\n        \"total\": 30\n    }\n}"
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Oops something went wrong'
                properties:
                  message:
                    type: string
                    example: 'Oops something went wrong'
      tags:
        - 'Order Management'
  '/api/v1/order/{order_id}':
    get:
      summary: 'Retrieve detailed information about a specific order for the currently authenticated user.'
      operationId: retrieveDetailedInformationAboutASpecificOrderForTheCurrentlyAuthenticatedUser
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {ACCESS_TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n    \"data\": {\n        \"id\": 1,\n        \"user\": {\n            \"id\": 2,\n            \"name\": \"John Doe\",\n            \"email\": \"johndoe@example.com\"\n        },\n        \"cart\": [...],\n    }\n}"
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Order not found'
                properties:
                  message:
                    type: string
                    example: 'Order not found'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Oops something went wrong'
                properties:
                  message:
                    type: string
                    example: 'Oops something went wrong'
      tags:
        - 'Order Management'
    parameters:
      -
        in: path
        name: order_id
        description: 'The ID of the order.'
        example: 99ee5dad-531c-4ba0-aee9-c0bda1d418ce
        required: true
        schema:
          type: string
  /api/v1/checkout:
    post:
      summary: 'Process the checkout for placing an order.'
      operationId: processTheCheckoutForPlacingAnOrder
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {ACCESS_TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  url: 'https://checkout.stripe.com/session/...'
                  message: 'Checkout initiated successfully'
                properties:
                  url:
                    type: string
                    example: 'https://checkout.stripe.com/session/...'
                  message:
                    type: string
                    example: 'Checkout initiated successfully'
      tags:
        - 'Order Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                success_url:
                  type: string
                  description: 'The URL to redirect to on successful payment.'
                  example: 'http://marks.com/modi-aliquid-rerum-nihil-minus-dignissimos-aut-rerum-in'
                cancel_url:
                  type: string
                  description: 'The URL to redirect to on payment cancellation.'
                  example: 'http://graham.net/a-rerum-dolores-quia'
                cart:
                  type: array
                  description: 'The array of products in the cart.'
                  example:
                    - quisquam
                  items:
                    type: string
                shipping:
                  type: object
                  description: ''
                  example: null
                  properties:
                    price:
                      type: number
                      description: 'The shipping price if shipping is involved.'
                      example: 78.4490701
                    billing_address_id:
                      type: string
                      description: 'shipping address_id if shipping is involved.'
                      example: beatae
              required:
                - success_url
                - cancel_url
                - cart
  /api/v1/admin/products:
    post:
      summary: 'Store a new product with related information and files.'
      operationId: storeANewProductWithRelatedInformationAndFiles
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"Product A\",\n        \"author_id\": 2,\n        \"price\": 19.99,\n        \"description\": \"Description of Product A\",\n        \"weight\": 0.5,\n        \"print_price\": 5.99,\n        \"preview\": \"book_previews/product_a_preview.jpg\",\n        \"product_file\": \"books/product_a_file.pdf\",\n        \"categories\": [...],\n        \"tags\": [...],\n        \"images\": [...]\n    }\n}"
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Error occurred. Try again'
                properties:
                  error:
                    type: string
                    example: 'Error occurred. Try again'
      tags:
        - 'Product Management'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the product.'
                  example: ipsum
                images:
                  type: array
                  description: 'Must be an image. Must not be greater than 2048 kilobytes.'
                  items:
                    type: string
                    format: binary
                price:
                  type: number
                  description: 'The price of the product.'
                  example: 13900.9329216
                print_price:
                  type: number
                  description: 'The printing price of the product.'
                  example: 604.474
                description:
                  type: string
                  description: 'The description of the product.'
                  example: 'Rerum porro officiis omnis quae.'
                categories:
                  type: array
                  description: 'The array of category IDs associated with the product.'
                  example:
                    - iure
                  items:
                    type: string
                tags:
                  type: array
                  description: 'The array of tag IDs associated with the product.'
                  example:
                    - consequuntur
                  items:
                    type: string
                author:
                  type: integer
                  description: "The ID of the product's author."
                  example: 18
                product_file:
                  type: string
                  format: binary
                  description: 'The main product file.'
                preview:
                  type: string
                  format: binary
                  description: 'The preview file of the product.'
                weight:
                  type: number
                  description: 'The weight of the product.'
                  example: 48436.1805946
                'images[]':
                  type: string
                  format: binary
                  description: 'An array of additional images for the product (if applicable).'
              required:
                - name
                - price
                - print_price
                - description
                - categories
                - tags
                - author
                - weight
      security: []
  '/api/v1/admin/products/{id}':
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {ACCESS_TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: null
                    name: null
                    weight: null
                    price: '0.00'
                    printPrice: '0.00'
                    description: null
                    author: null
                    categories: []
                    tags: []
                    images: []
                    reviews: []
                    preview: 'http://dunia.healthyishng.com/storage'
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: null
                      name:
                        type: string
                        example: null
                      weight:
                        type: string
                        example: null
                      price:
                        type: string
                        example: '0.00'
                      printPrice:
                        type: string
                        example: '0.00'
                      description:
                        type: string
                        example: null
                      author:
                        type: string
                        example: null
                      categories:
                        type: array
                        example: []
                      tags:
                        type: array
                        example: []
                      images:
                        type: array
                        example: []
                      reviews:
                        type: array
                        example: []
                      preview:
                        type: string
                        example: 'http://dunia.healthyishng.com/storage'
      tags:
        - 'Product Management'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ''
                  example: molestiae
                images:
                  type: array
                  description: 'Must be an image. Must not be greater than 2048 kilobytes.'
                  items:
                    type: string
                    format: binary
                price:
                  type: string
                  description: ''
                  example: nisi
                print_price:
                  type: number
                  description: ''
                  example: 303106.3912
                description:
                  type: string
                  description: ''
                  example: perferendis
                categories:
                  type: array
                  description: ''
                  example: null
                  items:
                    type: string
                tags:
                  type: array
                  description: ''
                  example: null
                  items:
                    type: string
                author:
                  type: string
                  description: ''
                  example: tempora
                product_file:
                  type: string
                  format: binary
                  description: 'Must be a file.'
                preview:
                  type: string
                  format: binary
                  description: 'Must be a file.'
                weight:
                  type: number
                  description: ''
                  example: 209922632.07544
              required:
                - name
                - price
                - print_price
                - description
                - author
                - product_file
                - preview
                - weight
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the product.'
        example: 99d35264-8076-49a5-a8d5-8cd88f85a773
        required: true
        schema:
          type: string
  '/api/v1/admin/products/{product_id}/images':
    post:
      summary: 'Add images to a product'
      operationId: addImagesToAProduct
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {ACCESS_TOKEN}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'Product Management'
      requestBody:
        required: false
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                images:
                  type: array
                  description: 'Must be an image. Must not be greater than 2048 kilobytes.'
                  items:
                    type: string
                    format: binary
    parameters:
      -
        in: path
        name: product_id
        description: 'The ID of the product.'
        example: 99d35264-8076-49a5-a8d5-8cd88f85a773
        required: true
        schema:
          type: string
  '/api/v1/admin/products/{product_id}/images/{productImage_id}':
    delete:
      summary: 'Delete image from product'
      operationId: deleteImageFromProduct
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {ACCESS_TOKEN}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'Product Management'
    parameters:
      -
        in: path
        name: product_id
        description: 'The ID of the product.'
        example: 99d35264-8076-49a5-a8d5-8cd88f85a773
        required: true
        schema:
          type: string
      -
        in: path
        name: productImage_id
        description: 'The ID of the productImage.'
        example: 99d35a23-2f11-406d-afde-f05b8efb9968
        required: true
        schema:
          type: string
  /api/v1/products:
    get:
      summary: 'Retrieve a paginated list of products with optional filters.'
      operationId: retrieveAPaginatedListOfProductsWithOptionalFilters
      description: ''
      parameters:
        -
          in: query
          name: name
          description: 'Search for products by name (partial match).'
          example: error
          required: false
          schema:
            type: string
            description: 'Search for products by name (partial match).'
            example: error
        -
          in: query
          name: author
          description: "Search for products by author's name."
          example: hic
          required: false
          schema:
            type: string
            description: "Search for products by author's name."
            example: hic
        -
          in: query
          name: category
          description: 'Search for products by category name.'
          example: ea
          required: false
          schema:
            type: string
            description: 'Search for products by category name.'
            example: ea
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      id: 1
                      name: 'Product A'
                      author_id: 1
                      price: 19.99
                      description: 'Description of Product A'
                      category:
                        id: 2
                        name: 'Category X'
                      author:
                        id: 1
                        name: 'Author Y'
                    -
                      id: 2
                      name: 'Product B'
                      author_id: 2
                      price: 29.99
                      description: 'Description of Product B'
                      category:
                        id: 3
                        name: 'Category Z'
                      author:
                        id: 2
                        name: 'Author Z'
                  links:
                    first: 'https://api.example.com/products?page=1'
                    last: 'https://api.example.com/products?page=3'
                    prev: null
                    next: 'https://api.example.com/products?page=2'
                  meta:
                    current_page: 1
                    from: 1
                    last_page: 3
                    path: 'https://api.example.com/products'
                    per_page: 10
                    to: 10
                    total: 25
                properties:
                  data:
                    type: array
                    example:
                      -
                        id: 1
                        name: 'Product A'
                        author_id: 1
                        price: 19.99
                        description: 'Description of Product A'
                        category:
                          id: 2
                          name: 'Category X'
                        author:
                          id: 1
                          name: 'Author Y'
                      -
                        id: 2
                        name: 'Product B'
                        author_id: 2
                        price: 29.99
                        description: 'Description of Product B'
                        category:
                          id: 3
                          name: 'Category Z'
                        author:
                          id: 2
                          name: 'Author Z'
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: 'Product A'
                        author_id:
                          type: integer
                          example: 1
                        price:
                          type: number
                          example: 19.99
                        description:
                          type: string
                          example: 'Description of Product A'
                        category:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 2
                            name:
                              type: string
                              example: 'Category X'
                        author:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            name:
                              type: string
                              example: 'Author Y'
                  links:
                    type: object
                    properties:
                      first:
                        type: string
                        example: 'https://api.example.com/products?page=1'
                      last:
                        type: string
                        example: 'https://api.example.com/products?page=3'
                      prev:
                        type: string
                        example: null
                      next:
                        type: string
                        example: 'https://api.example.com/products?page=2'
                  meta:
                    type: object
                    properties:
                      current_page:
                        type: integer
                        example: 1
                      from:
                        type: integer
                        example: 1
                      last_page:
                        type: integer
                        example: 3
                      path:
                        type: string
                        example: 'https://api.example.com/products'
                      per_page:
                        type: integer
                        example: 10
                      to:
                        type: integer
                        example: 10
                      total:
                        type: integer
                        example: 25
      tags:
        - 'Product Management'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ''
                  example: tempore
                author:
                  type: string
                  description: ''
                  example: ad
                category:
                  type: string
                  description: ''
                  example: culpa
      security: []
  '/api/v1/products/{id}':
    get:
      summary: 'Display a specific product by ID.'
      operationId: displayASpecificProductByID
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: null
                    name: null
                    weight: null
                    price: '0.00'
                    printPrice: '0.00'
                    description: null
                    author: null
                    categories: []
                    tags: []
                    images: []
                    reviews: []
                    preview: 'http://dunia.healthyishng.com/storage'
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: null
                      name:
                        type: string
                        example: null
                      weight:
                        type: string
                        example: null
                      price:
                        type: string
                        example: '0.00'
                      printPrice:
                        type: string
                        example: '0.00'
                      description:
                        type: string
                        example: null
                      author:
                        type: string
                        example: null
                      categories:
                        type: array
                        example: []
                      tags:
                        type: array
                        example: []
                      images:
                        type: array
                        example: []
                      reviews:
                        type: array
                        example: []
                      preview:
                        type: string
                        example: 'http://dunia.healthyishng.com/storage'
      tags:
        - 'Product Management'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Product ID'
        example: magni
        required: true
        schema:
          type: string
  '/api/v1/products/{product_id}/reviews':
    post:
      summary: 'Create a new review for a product.'
      operationId: createANewReviewForAProduct
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {ACCESS_TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 99ddc991-b5ea-4985-9733-ed9a4b459c0e
                    user:
                      id: 99cf69a0-2af8-4baf-bb7a-69fc531e9660
                      name: admin
                      email: admin@gmail.com
                    comment: 'lorem ipsum'
                    rating: '4'
                    createdAt: '2023-08-11T18:28:05.000000Z'
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 99ddc991-b5ea-4985-9733-ed9a4b459c0e
                      user:
                        type: object
                        properties:
                          id:
                            type: string
                            example: 99cf69a0-2af8-4baf-bb7a-69fc531e9660
                          name:
                            type: string
                            example: admin
                          email:
                            type: string
                            example: admin@gmail.com
                      comment:
                        type: string
                        example: 'lorem ipsum'
                      rating:
                        type: string
                        example: '4'
                      createdAt:
                        type: string
                        example: '2023-08-11T18:28:05.000000Z'
      tags:
        - 'Product Review'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
                  description: 'The comment for the review.'
                  example: et
                rating:
                  type: integer
                  description: 'The rating for the review (0-5).'
                  example: 14
              required:
                - comment
                - rating
    parameters:
      -
        in: path
        name: product_id
        description: 'The ID of the product.'
        example: 99d35264-8076-49a5-a8d5-8cd88f85a773
        required: true
        schema:
          type: string
  /api/v1/admin/tags:
    get:
      summary: 'Display a listing of the tags.'
      operationId: displayAListingOfTheTags
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      id: null
                      name: null
                    -
                      id: null
                      name: null
                properties:
                  data:
                    type: array
                    example:
                      -
                        id: null
                        name: null
                      -
                        id: null
                        name: null
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: null
                        name:
                          type: string
                          example: null
      tags:
        - 'Tags Management'
      security: []
    post:
      summary: 'Create a new Tag.'
      operationId: createANewTag
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: null
                    name: null
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: null
                      name:
                        type: string
                        example: null
      tags:
        - 'Tags Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 100 characters.'
                  example: atyigkanjphqqxvomrgpey
              required:
                - name
      security: []
  '/api/v1/admin/tags/{id}':
    get:
      summary: 'Display the specific tag by ID.'
      operationId: displayTheSpecificTagByID
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: null
                    name: null
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: null
                      name:
                        type: string
                        example: null
      tags:
        - 'Tags Management'
      security: []
    put:
      summary: 'Update a specific tag by ID.'
      operationId: updateASpecificTagByID
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: null
                    name: null
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: null
                      name:
                        type: string
                        example: null
      tags:
        - 'Tags Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 100 characters.'
                  example: anzpvavzjsacmsknwcnfnfw
              required:
                - name
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the tag.'
        example: 99cfd9ed-a48a-40d9-b896-4549d534fb7a
        required: true
        schema:
          type: string
  /api/v1/profile:
    get:
      summary: 'Display information about the currently logged-in user.'
      operationId: displayInformationAboutTheCurrentlyLoggedInUser
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {ACCESS_TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n    }\n}"
      tags:
        - User
  /api/v1/changePassword:
    post:
      summary: "Change the authenticated user's password."
      operationId: changeTheAuthenticatedUsersPassword
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {ACCESS_TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Password changed successfully'
                properties:
                  message:
                    type: string
                    example: 'Password changed successfully'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Current password is incorrect'
                properties:
                  error:
                    type: string
                    example: 'Current password is incorrect'
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Validation failed.'
                properties:
                  error:
                    type: string
                    example: 'Validation failed.'
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                current_password:
                  type: string
                  description: "The user's current password."
                  example: et
                new_password:
                  type: string
                  description: 'The new password.'
                  example: est
                new_password_confirmation:
                  type: string
                  description: 'The confirmation of the new password.'
                  example: tempore
              required:
                - current_password
                - new_password
                - new_password_confirmation
tags:
  -
    name: Authentication
    description: "\nEndpoint to manage user authentication"
  -
    name: 'Author Management'
    description: "\nEndpoint to manage authors"
  -
    name: 'Billing Address'
    description: "\nEndpoint to manage customers billing address"
  -
    name: 'Categories Management'
    description: ''
  -
    name: Endpoints
    description: ''
  -
    name: 'Order Management'
    description: "\nEndpoint to manage customers orders"
  -
    name: 'Product Management'
    description: "\nEndpoints to manage products"
  -
    name: 'Product Review'
    description: "\ncustomer review on a product"
  -
    name: 'Tags Management'
    description: "\nEndpoint to manage tags"
  -
    name: User
    description: ''
components:
  securitySchemes:
    default:
      type: http
      scheme: bearer
      description: ''
security:
  -
    default: []
